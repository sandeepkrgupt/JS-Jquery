VVI NOTE - 
Prototype in Javascript - 
Every JavaScript object has a prototype. The prototype is also an object.
All JavaScript objects inherit their properties and methods from their prototype.
<p id="demo"></p>
<script>
function Person(first, last, age, eye) {  // this is a prototype, Here Person is object constructor function.
    this.firstName = first;
    this.lastName = last;
    this.age = age;
    this.eyeColor = eye;
    this.name = function() { //Adding a new method to an existing object.
        return this.firstName + " " + this.lastName 
    };
}
Person.prototype.Address = "Mumbai";  //using prototype keyword

var myFather = new Person("John", "Doe", 50, "blue"); // new keyword creates new objects from the same prototype
myFather.nationality = "indian"; // Adding Properties to Objects

document.getElementById("demo").innerHTML =
"My father is " + myFather.name() + " " + myFather.nationality + " " +myFather.Address;  
</script>
// output - My father is John Doe indian Mumbai
-------------------------------------------------------------------------------
Type Casting in Javascript -
Type casting allows you to access values of a different types / Data type. 
Number() converts values to a - Number Data Type, (if value is string it will return NaN) 
String() converts to a String, 
Boolean() converts to a Boolean.
var x = 123;
x.toString() // output - 123; (String type)
var x = 'guptasandeep188';
parseInt(x); // output - 188 (Number type)
Number(x)  // output - NaN (if x = "188" output - 188)
----------------------------------------------------------------------------
What Is an Object?
The object is a collection of properties and each property associated with the name-value pairs. 
The object can contain any data types (numbers, arrays, object etc.)
-----------------------------------------------------------------------------
constructor -
 constructor is a function used to initialize new object. 

Creating Javascript Objects -
1. using literals
var obj = {}

2. using constructor -
var obj = new Object();
Obj.empId=”001”;
Obj.empCode=”X0091”;

Obj.empAddressDetail = function(){
    console.log(“Hi, I Anil”);
};
-----------------------------------------------------------------------------
Reading url From Browser ?
window.location.href returns the href (URL) of the current page
window.location.hostname returns the domain name of the web host
window.location.pathname returns the path and filename of the current page
window.location.protocol returns the web protocol used (http: or https:)

<p id="demo"></p>
<script>
    document.getElementById("demo").innerHTML =  window.location.href;
</script>

-----------------------------------------------------------------------------
Getting Browser , OS and User Details using javascript
<!DOCTYPE html>
<html>
<body>
<div id="example"></div>
<script type="text/javascript">
  txt = "<p>Browser CodeName: " + navigator.appCodeName + "</p>"; 
  txt+= "<p>Browser Name: " + navigator.appName + "</p>";
  txt+= "<p>Browser Version: " + navigator.appVersion + "</p>";
  txt+= "<p>Cookies Enabled: " + navigator.cookieEnabled + "</p>";
  txt+= "<p>Platform: " + navigator.platform + "</p>";
  txt+= "<p>User-agent header: " + navigator.userAgent + "</p>";
  document.getElementById("example").innerHTML=txt;
</script>
</body>
____________________________________________________________________
           DIFF B/W SYNCHRONOUS AND ASYNCHRONOUS PROGRAMMING
  
  Synchronous Ways - it waits each operation to complete then after it executes the next operation.
  e.g -
  var db = database.query("Select * from employee");
  console.log("Query Finished");
  console.log("Next Line");
  output - 
  Query Finished
  Next Line
  Asynchronous Way - It Never waits for each operation to complete, rather it execute all operations in first go. 
  The result of each operation will be handled once the result will be available for your query.
  e.g -
  database.query("Select * from employee", function(result){
  console.log("query finished");
  });
  console.log("Next Line");
  output -
  Next Line
  Query Finished
 -------------------------------------------------------------------
 we can use variable before it has been declared.
<p id="demo"></p>
<button onclick="clc()">cc</button>
<script>
function clc(){
x = ["hello india","hello usa"];
console.log(x);
}
</script>
output - 0 : "hello india"
         1 : "hello usa"
or
<script>
function clc(){
x = ["hello india","hello usa"];
console.log(x);
var x;
}
</script>
output - 0 : "hello india"
         1 : "hello usa"
__________________________________________________________
Hoisting is JavaScript's default behavior of moving declarations to the top.
WHEN WE DECLARE VARIABLES TO THE TOP IS CALLED HOISTING.
Like -
x = ["hello india","hello usa"];
var x;
----------------------------------------------------------
___________________USE STRICT FOR ERRORS_________________
<button onclick="cc()">cc</button>
<script>
"use strict";
function cc(){
x = 3.14;  
console.log(x);
}
</script>
output - Uncaught ReferenceError: x is not defined

-------------------------------------------------------------
1. Data Types in Javascript ?

Ans - There are two types of data Type in Javascript
1. Premitive -
Number
String
Boolean
Null
undefined

2. Non Premitive -
Object
Array
Regular Expression.
or we can say there are 6 types of Data Types in JS.
Object, Number, String, Boolean, Null, and Undefined. 

Objects include - arrays, functions, and ordinary objects. 
Numbers may be - integers or floating point or the special values NaN and Infinity . 
Strings include the empty string, "".


----------------------------------------------------
__________________SRING___________________________
2. Javascript string methods

Ans - 
length - getting length of string.
indexOf() - to get index of sub string inside any string.
lastIndexOf() - to get positon of last string.

----------------------------------------------------------
3. Extracting string part ?

Ans - There are three methods -
1. slice(start,end); // If the parameter or number is negative it will count from the end.
2. substr(start,length); 
3. substring(start,end); // same as slice but cannot take negative values.

----------------------------------------------------------
4. Replacing new string to existing string ?

Ans - 
replace("existing string","new string");

-----------------------------------------------------------
__________________________ARRAY_________________________________

5. Javascript Array ?
Array is a special variable that can store more than one value at a time like var x = ["a","b","c"]
------------------------------------------------------------
6. getting number of item in array ?
var arr =  ["a","b","c"];
arr.length();
---------------------------------------------------------
7. sorting item in array 
var arr = ["d","a","b","c"];
arr.sort();
----------------------------------------------------------------
8. deleting first element of array
shift() delete the first element of an array and send all other elements in lower index.
--------------------------------------------------------------
9. adding new element at beginning 
unshift() adds new element at the beginning of an array.
-----------------------------------------------------------------
10. adding new elements at specific position in array
var arr = ["d","a","b","c"];
arr.splice(2,0,"ee","ff"); // start , length
output ["d","a","ee","ff","b","c"];
------------------------------------------------------------
11. removing existing from specific position in array
var arr = ["d","a","b","c"];
arr.splice(1,2); // start , length
output ["d","a"];

_____________________Javascript Objects___________________
var obj = {"name":"san",id:1,"class":"6th"}
for (i in obj){
alert(obj[i]); // san , 1 , 6th
alert(obj[i].name);  // undefined
}

-------------------------------------------------------------
________________This and NaN______________________________
NaN is a reserved word that shows the number is not a valid number like 5/'five'
This is the object that owns the javascript code.

--------------------------------------------------------------
_______________________Closure_______________________________
Global variables can make local using Closure
Closures are inner function that has access to outer function variables.
<script>
Var mycounter = function(){
alert('this is outer fun');
};
Function myFun(){
document.getElementById(“demo”).innerHTML = mycounter();
}
</script>


-----------------------------------------------------------------------
________________________Javascript DOM________________________________
DOM is a W3C standered. DOM provides standerd to access HTML documents.
Through DOM we can do following -
i. Change HTML elements and attributes
ii. Remove elements 
iii. add new elements and attributes
iv. Take action on html events.
DOM methods for finding html elements -
getElementById
getElementByClassName
getElementByTagName

---------------------------------------------------------------------------
_____________Javascript CSS Methods_______________________________________
setAttribute - document.getElementById(‘demo’).setAttribute(‘color’,’red’);
style.property_name - document.getElementById(‘demo’).style.color = ’red’;

-----------------------------------------------------------------------------
___________Handeling HTML elements using Javascript____________________________
1.document.createElement(element) - Create an HTML element
<button onclick="myFunction()">Try it</button>
<script>
function myFunction() {
    var btn = document.createElement("button");
    document.body.appendChild(btn);
}
</script>
2.document.removeChild(element) - Remove an HTML element

3.document.appendChild(element) - Add an HTML element
<button onclick="addele()">add element</button>
<ul id="lists">
<li>Tea</li>
</ul>
<script>
function addele(){
var a = document.createElement("LI");
var b = document.createTextNode("Coffee");
a.appendChild(b);
document.getElementById("lists").appendChild(a);
}
</script>

document.replaceChild(element) - Replace an HTML element

document.write(text) - Write into the HTML output stream

--------------------------------------------------------------
_________________________addEventListener____________________
addEventListener add an event listener to HTML elements. We can add multiple event listners.
<div id="demo"></div>
<script>
document.getElementById("demo").addEventListener('click',helloworld);
function helloworld(){
alert("hello all world");
}
</script>


--------------------------------------------------------------------
____________________Stop default Action in Javascript______________
preventDefault stops the default action or functionality like click of any link in anchor.
<a href="www.w3school.com/angular.asp" id="link1">angular tutorial</a>
<script>
document.getElementById("link1").addEventListner('click',function(evnt){
evnt.preventDefault();
});
</script>

__________________Very Very Importent_________________________________
-----------------------------------------------------------------------
___________________Javascript Hoisting________________________________

In javascript we can use variable before it is declared.
or
In JavaScript, a variable can be declared after it has been used.
like 
<script>
x = "san";
console.log(x);
</script>
output - san ( not undefined. )
Hoisting is javascript default behavior of moving all declarations to the top of current script or function.

----------------------------------------------------------------------------
___________________Javascript Promises______________________________________
promises are used to call funtions one after another in a sequence if the first function completed successfully.
<script>
function firstfun(){
var promiseone = new Promise(function(resolve,reject){
setTimeout(function(){
console.log('fst function');
resolve({'data' : 'john'});
},2000)
});
return promiseone;
}
function secondfun(){
var promisetwo = new Promise(function(resolve,reject){
setTimeout(function(){
console.log('second function');
resolve({'data': 'marine'});
},2000)
})
return promisetwo;
}
// calling in sequence
firstfun().then(secondfun)....
</script>

-------------------------------------------------------------------------
_______________Javascript Object Creation in diff Ways_______________________

1. By using new keyword;
var obj = new Object();

2. By using object.create
var obj = object.create(null);

3. by using {}
var obj = {id : 1, name : 'san'}

4. by using this keyword.

____________________redirect to another/logout page if no user activity_________
<script>
var idlestate;
idlestate = setTimeout("location.href = 'location to redirect';",10000) // 10 min
window.onmousemove = function(){
clearTimeout(idlestate);
idlestate = setTimeout("location.href = 'location to redirect';",10000);
};
</script>

____________________________noconflict__________________________________________
<script>
$.noConflict();
jQuery( document ).ready(function( $ ) {
  // Code that uses jQuery's $ can follow here.
});
// Code that uses other library's $ can follow here.
</script>

_______________________setTimeout and setInterval_______________________

Ans - setTimeout execute the callback function after specific amount of time but setInterval 
executes function after regular interval.

setTimeout(function(){
console.log('i am using settimeout');
},2000)

setInterval(function(){
console.log('am using serInterval');
},1000);

______________________________Query Selector____________________________________

The querySelector() method only returns the first element that matches the specified selectors. 
To return all the matches, use the querySelectorAll() method instead.
<p>para one</p>
<p>para two</p>
<p>para three</p>
<button onclick="qselect()">click</button>

<script>
function qselect(){
         document.querySelector("p").style.background = "black";
}
</script>

______________________________Javascript eval function_________________________
The eval() function evaluates or executes an argument.
If the argument is an expression, eval() evaluates the expression. 
<button onclick="myFunction()">Try it</button>
<p id="demo"></p>
<script>
function myFunction() {
    var x = "10"; or 10   
    var y = "20"; or 20
    var a = eval("x * y") + "<br>";
    var b = eval("2 + 2") + "<br>";
    var c = eval("x + 17") + "<br>";
    var res = a + b + c;
    document.getElementById("demo").innerHTML = res;
}
</script>
output - 200 , 4 , 1017
But when x = "san" y = "john" 
output - NaN , 4 , san17

______________________________Json related______________________________________
json.parse() - Converting Json string into Json object 
var obj = '{ id : 1,name : "rohit", class : 10 }' // this is string type object inside ' '
var cvt = json.parse(obj);

json.stringify() - Converts Json object into json string.
var obj = { id : 1, name : "rohit", class : 10 } // this is object type 
var cvt = json.stringify(obj);


**********************************************************************************
-------------------------------------AJAX----------------------------------------
Ajax is a tequnic to load content from server without postback or page refresh.

<p id="demo"></p>
<button onclick="loadAjax()"></button>
<script>
function loadAjax(){
var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function(){
if(this.readyState == 4 && this.status == 200){
document.getElementById("demo").innerHTML = this.responseText;
}
};
xhttp.open("get","url",true);
xhttp.send();
}
</script>
Second Way - ( calling a function if status - 200 )

<script>
function loadAjax(){
var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function(){
if(this.readyState == 4 && this.status == 200){
showcontent(this);
}
};
xhttp.open("get","url",true);
xhttp.send();
}
function showcontent(){
document.getElementById("demo").innerHTML = this.responseText;
}
</script>

______________________XMLHttp Request Methods_______________________
--------------------------------------------------------------------
new XMLHttpRequest = XMLHttp request object that sends request to the web server.
abort() = cancel current request.
getResponseHeader() = return specific header info.
open(method,url,assr,username,password) // assr , username, password - optional
send() - send request to server.
setRequestHeader() = add level value pair to header to be send.

______________________XMLHttp Request Properties_____________________
---------------------------------------------------------------------
onreadystatechange = define function to be called when ready state change.
readyState = hold the status of XMLHttp Request.
0 = request is not initialized.
1 = server connection established.
2 = request received.
3 = request processing.
4 = request is finished and response is ready.
responseText = return response data as a string.
Status - 200(success), 403(forbidden),404(not found).
statusText - return status text. 

___________________________XMLHttp Response Header____________________
----------------------------------------------------------------------
http is a protocall. request header is a concept of http protocall. when an XMLHttpRequest happens text
is exchanged between client and server. Request Headers are the part of the text that client sends to server.
To Set Header = Content-type
To Set Value = x-www-form-urlencoded
xhttp.setRequestHeader("Content-type"," application/x-www-form-urlencoded");

_______________________Using Assynchronous as True__________________________
----------------------------------------------------------------------------
Sending assynchronous means the javascript does not have to wait for server response.
When assychronous is true function executes when response is ready.

**************************************END*************************************
