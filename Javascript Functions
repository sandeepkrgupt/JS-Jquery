Javascript Functions are defined in three diff ways

i. Using function keyword known as function declaration
function alrt(a,b){
 return a*b;
}
// the declared function will not execute if they are not invoked like below
document.getElementById("demo").innerHTML = alrt(5,6);
-------------------------------------------------------
ii. Using Expression
var x = function(a,b){
return a*b;
}
document.getElementById("demo").innerHTML = x;   // output - function(a,b){ return a*b;}
document.getElementById("demo").innerHTML = x(5,6);   // output - 30
document.getElementById("demo").innerHTML = x(5,"6");   // output - 30

document.getElementById("demo").innerHTML = x(9); // output - NaN
document.getElementById("demo").innerHTML = x(4, "str");  // output - NaN

Note : - Anonymous Function - A function with no name is known as anonymous function.
Expressional functions are type of Anonymous functions.
--------------------------------------------------------
iii. Using Constructor
var x = new Function("a","b", "return a*b");
document.getElementById("demo").innerHTML = x(5,6);

------------------------------------------------------------
Function Hoisting
Hoisting is the default behavior of javascript of moving declarations to the top of current scope.
Hoisting is applied to variable and function declaration like
x = 5; // declaration
var x; // defenition

myfun(6); // declaration
function myfun(){} // definition

Note : -Functions defined using an expression are not hoisted.

---------------------------------------------------------------
 Self Invoking function 
 function expression can be made self invoking
 A self invoking function call itself automatically , without being called.
 
 (function(){
 document.getElementById("demo").innerHTML = " Am Self Invoking Fun"; // output - Am Self Invoking fun
 })();
 
 (function (x) {
    document.getElementById("demo").innerHTML = x;   // output - Am indian
})("Am Indian");

Note : - A self invoking function is actually an anonymous function.
-------------------------------------------------------------------
Javascript function as value

function myfun(a,b){
return a+b;
}
var x = myfun(5,7);
document.getElementById("demo").innerHTML = x;

--------------------------------------------------------------------
Javascript function as Expression
function myfun(a,b){
return a*b;
}
var x = myfun(5,6) + 10;
var y = myfun(5,6) + "10";
var z = myfun(5,6) + "Str";
document.getElementById("demo").innerHTML = x;  // output - 40
document.getElementById("demo").innerHTML = y;  // output - 40
document.getElementById("demo").innerHTML = z;  // output - NaN
---------------------------------------------------------------------
Javascript Functions as Object
Javascript functions are objects with properties and methods.

Note : - arguments.length returns the number of arguments received when function invoked/called.
function myfun(a,b,c,d,e,f){
 return arguments.length;   // output - 3
}
document.getElementById("demo").innerHTML = myfun(4,5,"Arg")
-----------------------------------------------------------------------
toString() - use to return function as a string.
function myfun(){
return a;
}
document.getElementById("demo").innerHtml = myfun.toString() // ouput - function myfun(){ return a ; }
-----------------------------------------------------------------------
Getting the sum of all arguments of a function
<script>
function sumAll() {
    var i, sum = 0;
    for(i = 0; i < arguments.length; i++) {
        sum = sum + arguments[i];
    }
    return sum;
} 
document.getElementById("demo").innerHTML = sumAll(1, 123, 6); // output -  130
document.getElementById("demo").innerHTML = sumAll(1,7 "123", "str"); // output -  8123str
</script>
--------------------------------------------------------------------------
Javascript call() and apply() -
call() takes any function arguments separately.
document.getElementById("demo").innerHTML = Math.max(1,2,6,0); // output - 6

apply() takes any function arguments as an array.
document.getElementById("demo").innerHTML = Math.max(1,2,6,0); // output - 6

-----------------------------------------------------------------------------
Javascript Closure with example
JavaScript variables can belong to the local or global scope.
Global variables can be made local (private) with closures.
<p id="demo">0</p>
<button onclick="myFun()">click</button>
<script>
var count = 0;
var myCount = (function(){
var count = 2;
return function(){ return count += 1};
})();
function myFun(){
document.getElementById("demo").innerHTML = myCount();
}
</script>
this will start from 2.

-------------------------------------------------------------------
Some functions and outputs -
function demoTest() {
    x = 15;
};
console.log(x); //output is 15

The example for local scope variable -
function getDetail() {
    var gblVar = "Anil Singh";
    console.log(gblVar);   // Anil Singh
}

And other example for local -
function demoText() {
        var x = 15;
};
console.log(x); //undefined
-----------------------------------------------------------

Javascript Return Statement -
The return statement stops the execution of a function and returns a value from that function.
<p id="demo"></p>
<script>
function myFunction(x,y) {
   x = "hello";
   y = "india";
   return (x + y) ;
}
document.getElementById("demo").innerHTML = myFunction();
</script>
// output - helloindia
================================
<script>
function myFunction(x,y) {
   x = "hello";
   y = "india";
   return ;
}
document.getElementById("demo").innerHTML = myFunction();
</script>
// output - undefined
=============================
<script>
function myFunction(x,y) {
x = "hello";
y = "india";
return x + (y = "USA");
}
document.getElementById("demo").innerHTML = myFunction();
</script>
// output - helloUSA
=====================================
<script>
function myFunction(x,y) {
return  x+y;  // if we return x+y output - 1 (IF WE WRITE TWO RETURN STATEMENT, FIRST WILL RETURN VALUE.HERE x+y WILL BE RETURNED.)
return x*y   // if we return x*y output - 0
}
document.getElementById("demo").innerHTML = myFunction(true,false);
</script>
<script>
function myFunction(x,y) {
return x+y;
  function shw(x,y){
      return x-y;
  }
}
document.getElementById("demo").innerHTML = myFunction(5,3);  // 8
document.getElementById("demo").innerHTML = shw(5,3); // undefined
================================
<script>
function myFunction(x,y) {
 x = 12;
 y = 15;
return x+y;
}
document.getElementById("demo").innerHTML = myFunction(5,3);
</script> // output 27
